
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "programleftANDORleftGREATER_THANLESS_THANGREATER_THAN_EQUALLESS_THAN_EQUALleftAPPOINTMENTleftPLUSMINUSleftTIMESDIVIDEAND APPOINTMENT BOOL CHAR COMMA DIVIDE DOUBLEQUOTATION ELSE EQUAL FLOAT FOR GREATER_THAN GREATER_THAN_EQUAL ID IDENT IF INT KEYWORD LBRACKET LCBRACKET LESS_THAN LESS_THAN_EQUAL LPAREN MINUS NUMBER OR PLUS PRINT RBRACKET RCBRACKET RETURN RPAREN SEMICOLON TIMES VOID WHILE\n     program    :   decl_list\n    \n    decl_list   :   decl_list decl\n                |   decl\n\n    \n    decl    :   var_decl\n            |   fun_decl\n    \n    var_decl    :   type_spec IDENT SEMICOLON\n                |   type_spec IDENT LBRACKET RBRACKET SEMICOLON\n    \n    type_spec   :   VOID\n                |   BOOL\n                |   INT\n                |   FLOAT\n                |   CHAR\n    \n    fun_decl    :   type_spec IDENT LPAREN params RPAREN compound_stmt\n    \n    params  :   param_list\n            |   VOID\n            |   empty\n    \n    param_list  :   param_list COMMA param\n                |   param\n    \n    param   :   type_spec IDENT\n            |   type_spec IDENT LBRACKET RBRACKET\n    \n    compound_stmt   :     local_decls stmt_list\n    \n    local_decls    :    local_decls local_decl\n                   |    empty\n    \n    local_decl     :    type_spec IDENT SEMICOLON\n                   |    type_spec IDENT LBRACKET RBRACKET SEMICOLON\n    \n    stmt_list   :   stmt_list stmt\n                |   empty\n    \n    stmt    :   expr_stmt\n            |   if_stmt\n            |   while_stmt\n            |   return_stmt\n\n    \n    expr_stmt   :   expr SEMICOLON\n                |   SEMICOLON\n    \n    while_stmt  :   WHILE LPAREN expr RPAREN stmt\n    \n    if_stmt  :     IF LPAREN expr RPAREN stmt\n             |     IF LPAREN expr RPAREN stmt ELSE stmt\n    \n    return_stmt  :   RETURN SEMICOLON\n                 |   RETURN expr SEMICOLON\n    \n    expr    :   IDENT APPOINTMENT expr\n            |   IDENT LBRACKET expr RBRACKET EQUAL expr\n            |   expr OR expr\n            |   expr AND expr\n            |   expr EQUAL expr\n            |   expr APPOINTMENT NUMBER\n            |   expr LESS_THAN_EQUAL expr\n            |   expr GREATER_THAN_EQUAL expr\n            |   expr LESS_THAN expr\n            |   expr GREATER_THAN expr\n            |   expr TIMES expr\n            |   expr PLUS expr\n            |   expr DIVIDE expr\n            |   expr MINUS expr\n            |   '!' expr\n            |   LPAREN expr RPAREN\n            |   IDENT\n            |   IDENT LBRACKET expr RBRACKET\n            |   IDENT LPAREN args RPAREN\n            |   NUMBER\n    \n    arg_list    :   arg_list COMMA expr\n                |   expr\n    \n    args    :   arg_list\n            |   empty\n    empty : "
    
_lr_action_items = {'VOID':([0,2,3,4,5,12,14,16,24,26,27,29,30,31,34,35,36,38,39,40,41,42,44,53,69,75,92,105,106,107,112,],[7,7,-3,-4,-5,-2,-6,21,-7,-63,7,-13,7,-23,-21,-22,-27,-26,-28,-29,-30,-31,-33,-32,-37,-24,-38,-25,-35,-34,-36,]),'BOOL':([0,2,3,4,5,12,14,16,24,26,27,29,30,31,34,35,36,38,39,40,41,42,44,53,69,75,92,105,106,107,112,],[8,8,-3,-4,-5,-2,-6,8,-7,-63,8,-13,8,-23,-21,-22,-27,-26,-28,-29,-30,-31,-33,-32,-37,-24,-38,-25,-35,-34,-36,]),'INT':([0,2,3,4,5,12,14,16,24,26,27,29,30,31,34,35,36,38,39,40,41,42,44,53,69,75,92,105,106,107,112,],[9,9,-3,-4,-5,-2,-6,9,-7,-63,9,-13,9,-23,-21,-22,-27,-26,-28,-29,-30,-31,-33,-32,-37,-24,-38,-25,-35,-34,-36,]),'FLOAT':([0,2,3,4,5,12,14,16,24,26,27,29,30,31,34,35,36,38,39,40,41,42,44,53,69,75,92,105,106,107,112,],[10,10,-3,-4,-5,-2,-6,10,-7,-63,10,-13,10,-23,-21,-22,-27,-26,-28,-29,-30,-31,-33,-32,-37,-24,-38,-25,-35,-34,-36,]),'CHAR':([0,2,3,4,5,12,14,16,24,26,27,29,30,31,34,35,36,38,39,40,41,42,44,53,69,75,92,105,106,107,112,],[11,11,-3,-4,-5,-2,-6,11,-7,-63,11,-13,11,-23,-21,-22,-27,-26,-28,-29,-30,-31,-33,-32,-37,-24,-38,-25,-35,-34,-36,]),'$end':([1,2,3,4,5,12,14,24,26,29,30,31,34,35,36,38,39,40,41,42,44,53,69,75,92,105,106,107,112,],[0,-1,-3,-4,-5,-2,-6,-7,-63,-13,-63,-23,-21,-22,-27,-26,-28,-29,-30,-31,-33,-32,-37,-24,-38,-25,-35,-34,-36,]),'IDENT':([6,7,8,9,10,11,18,21,26,30,31,34,35,36,37,38,39,40,41,42,44,46,48,51,53,54,55,56,58,59,60,61,62,63,64,65,66,68,69,71,72,73,75,92,100,101,104,105,106,107,108,110,112,],[13,-8,-9,-10,-11,-12,25,-8,-63,-63,-23,49,-22,-27,52,-26,-28,-29,-30,-31,-33,49,49,49,-32,49,49,49,49,49,49,49,49,49,49,49,49,49,-37,49,49,49,-24,-38,49,49,49,-25,-35,-34,49,49,-36,]),'SEMICOLON':([13,17,26,30,31,34,35,36,38,39,40,41,42,43,44,48,49,50,52,53,69,70,74,75,77,78,79,80,81,82,83,84,85,86,87,88,90,92,93,99,100,101,102,103,105,106,107,110,111,112,],[14,24,-63,-63,-23,44,-22,-27,-26,-28,-29,-30,-31,53,-33,69,-55,-58,75,-32,-37,92,-53,-24,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-54,-38,-39,105,44,44,-56,-57,-25,-35,-34,44,-40,-36,]),'LBRACKET':([13,25,49,52,],[15,28,72,76,]),'LPAREN':([13,26,30,31,34,35,36,38,39,40,41,42,44,45,46,47,48,49,51,53,54,55,56,58,59,60,61,62,63,64,65,66,68,69,71,72,73,75,92,100,101,104,105,106,107,108,110,112,],[16,-63,-63,-23,46,-22,-27,-26,-28,-29,-30,-31,-33,66,46,68,46,73,46,-32,46,46,46,46,46,46,46,46,46,46,46,46,46,-37,46,46,46,-24,-38,46,46,46,-25,-35,-34,46,46,-36,]),'RBRACKET':([15,28,49,50,74,76,77,78,79,80,81,82,83,84,85,86,87,88,90,93,94,102,103,111,],[17,33,-55,-58,-53,99,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-54,-39,102,-56,-57,-40,]),'RPAREN':([16,19,20,21,22,23,25,32,33,49,50,67,73,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,95,96,97,98,102,103,109,111,],[-63,26,-14,-15,-16,-18,-19,-17,-20,-55,-58,90,-63,-53,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,100,-54,101,-39,103,-61,-62,-60,-56,-57,-59,-40,]),'COMMA':([20,23,25,32,33,49,50,74,77,78,79,80,81,82,83,84,85,86,87,88,90,93,96,98,102,103,109,111,],[27,-18,-19,-17,-20,-55,-58,-53,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-54,-39,104,-60,-56,-57,-59,-40,]),'IF':([26,30,31,34,35,36,38,39,40,41,42,44,53,69,75,92,100,101,105,106,107,110,112,],[-63,-63,-23,45,-22,-27,-26,-28,-29,-30,-31,-33,-32,-37,-24,-38,45,45,-25,-35,-34,45,-36,]),'WHILE':([26,30,31,34,35,36,38,39,40,41,42,44,53,69,75,92,100,101,105,106,107,110,112,],[-63,-63,-23,47,-22,-27,-26,-28,-29,-30,-31,-33,-32,-37,-24,-38,47,47,-25,-35,-34,47,-36,]),'RETURN':([26,30,31,34,35,36,38,39,40,41,42,44,53,69,75,92,100,101,105,106,107,110,112,],[-63,-63,-23,48,-22,-27,-26,-28,-29,-30,-31,-33,-32,-37,-24,-38,48,48,-25,-35,-34,48,-36,]),'!':([26,30,31,34,35,36,38,39,40,41,42,44,46,48,51,53,54,55,56,58,59,60,61,62,63,64,65,66,68,69,71,72,73,75,92,100,101,104,105,106,107,108,110,112,],[-63,-63,-23,51,-22,-27,-26,-28,-29,-30,-31,-33,51,51,51,-32,51,51,51,51,51,51,51,51,51,51,51,51,51,-37,51,51,51,-24,-38,51,51,51,-25,-35,-34,51,51,-36,]),'NUMBER':([26,30,31,34,35,36,38,39,40,41,42,44,46,48,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,71,72,73,75,92,100,101,104,105,106,107,108,110,112,],[-63,-63,-23,50,-22,-27,-26,-28,-29,-30,-31,-33,50,50,50,-32,50,50,50,80,50,50,50,50,50,50,50,50,50,50,-37,50,50,50,-24,-38,50,50,50,-25,-35,-34,50,50,-36,]),'ELSE':([39,40,41,42,44,53,69,92,106,107,112,],[-28,-29,-30,-31,-33,-32,-37,-38,110,-34,-36,]),'OR':([43,49,50,67,70,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,98,102,103,109,111,],[54,-55,-58,54,54,54,-41,-42,54,-44,-45,-46,-47,-48,-49,-50,-51,-52,54,-54,54,-39,54,54,-56,-57,54,54,]),'AND':([43,49,50,67,70,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,98,102,103,109,111,],[55,-55,-58,55,55,55,-41,-42,55,-44,-45,-46,-47,-48,-49,-50,-51,-52,55,-54,55,-39,55,55,-56,-57,55,55,]),'EQUAL':([43,49,50,67,70,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,98,102,103,109,111,],[56,-55,-58,56,56,56,-41,-42,56,-44,-45,-46,-47,-48,-49,-50,-51,-52,56,-54,56,-39,56,56,108,-57,56,56,]),'APPOINTMENT':([43,49,50,67,70,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,98,102,103,109,111,],[57,71,-58,57,57,57,57,57,57,-44,57,57,57,57,-49,-50,-51,-52,57,-54,57,-39,57,57,-56,-57,57,57,]),'LESS_THAN_EQUAL':([43,49,50,67,70,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,98,102,103,109,111,],[58,-55,-58,58,58,58,58,58,58,-44,-45,-46,-47,-48,-49,-50,-51,-52,58,-54,58,-39,58,58,-56,-57,58,58,]),'GREATER_THAN_EQUAL':([43,49,50,67,70,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,98,102,103,109,111,],[59,-55,-58,59,59,59,59,59,59,-44,-45,-46,-47,-48,-49,-50,-51,-52,59,-54,59,-39,59,59,-56,-57,59,59,]),'LESS_THAN':([43,49,50,67,70,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,98,102,103,109,111,],[60,-55,-58,60,60,60,60,60,60,-44,-45,-46,-47,-48,-49,-50,-51,-52,60,-54,60,-39,60,60,-56,-57,60,60,]),'GREATER_THAN':([43,49,50,67,70,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,98,102,103,109,111,],[61,-55,-58,61,61,61,61,61,61,-44,-45,-46,-47,-48,-49,-50,-51,-52,61,-54,61,-39,61,61,-56,-57,61,61,]),'TIMES':([43,49,50,67,70,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,98,102,103,109,111,],[62,-55,-58,62,62,62,62,62,62,-44,62,62,62,62,-49,62,-51,62,62,-54,62,62,62,62,-56,-57,62,62,]),'PLUS':([43,49,50,67,70,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,98,102,103,109,111,],[63,-55,-58,63,63,63,63,63,63,-44,63,63,63,63,-49,-50,-51,-52,63,-54,63,63,63,63,-56,-57,63,63,]),'DIVIDE':([43,49,50,67,70,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,98,102,103,109,111,],[64,-55,-58,64,64,64,64,64,64,-44,64,64,64,64,-49,64,-51,64,64,-54,64,64,64,64,-56,-57,64,64,]),'MINUS':([43,49,50,67,70,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,98,102,103,109,111,],[65,-55,-58,65,65,65,65,65,65,-44,65,65,65,65,-49,-50,-51,-52,65,-54,65,65,65,65,-56,-57,65,65,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'decl_list':([0,],[2,]),'decl':([0,2,],[3,12,]),'var_decl':([0,2,],[4,4,]),'fun_decl':([0,2,],[5,5,]),'type_spec':([0,2,16,27,30,],[6,6,18,18,37,]),'params':([16,],[19,]),'param_list':([16,],[20,]),'empty':([16,26,30,73,],[22,31,36,97,]),'param':([16,27,],[23,32,]),'compound_stmt':([26,],[29,]),'local_decls':([26,],[30,]),'stmt_list':([30,],[34,]),'local_decl':([30,],[35,]),'stmt':([34,100,101,110,],[38,106,107,112,]),'expr_stmt':([34,100,101,110,],[39,39,39,39,]),'if_stmt':([34,100,101,110,],[40,40,40,40,]),'while_stmt':([34,100,101,110,],[41,41,41,41,]),'return_stmt':([34,100,101,110,],[42,42,42,42,]),'expr':([34,46,48,51,54,55,56,58,59,60,61,62,63,64,65,66,68,71,72,73,100,101,104,108,110,],[43,67,70,74,77,78,79,81,82,83,84,85,86,87,88,89,91,93,94,98,43,43,109,111,43,]),'args':([73,],[95,]),'arg_list':([73,],[96,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> decl_list','program',1,'p_program','parser.py',24),
  ('decl_list -> decl_list decl','decl_list',2,'p_decl_list','parser.py',35),
  ('decl_list -> decl','decl_list',1,'p_decl_list','parser.py',36),
  ('decl -> var_decl','decl',1,'p_decl','parser.py',43),
  ('decl -> fun_decl','decl',1,'p_decl','parser.py',44),
  ('var_decl -> type_spec IDENT SEMICOLON','var_decl',3,'p_var_decl','parser.py',50),
  ('var_decl -> type_spec IDENT LBRACKET RBRACKET SEMICOLON','var_decl',5,'p_var_decl','parser.py',51),
  ('type_spec -> VOID','type_spec',1,'p_type_spec','parser.py',57),
  ('type_spec -> BOOL','type_spec',1,'p_type_spec','parser.py',58),
  ('type_spec -> INT','type_spec',1,'p_type_spec','parser.py',59),
  ('type_spec -> FLOAT','type_spec',1,'p_type_spec','parser.py',60),
  ('type_spec -> CHAR','type_spec',1,'p_type_spec','parser.py',61),
  ('fun_decl -> type_spec IDENT LPAREN params RPAREN compound_stmt','fun_decl',6,'p_fun_decl','parser.py',67),
  ('params -> param_list','params',1,'p_params','parser.py',73),
  ('params -> VOID','params',1,'p_params','parser.py',74),
  ('params -> empty','params',1,'p_params','parser.py',75),
  ('param_list -> param_list COMMA param','param_list',3,'p_param_list','parser.py',81),
  ('param_list -> param','param_list',1,'p_param_list','parser.py',82),
  ('param -> type_spec IDENT','param',2,'p_param','parser.py',88),
  ('param -> type_spec IDENT LBRACKET RBRACKET','param',4,'p_param','parser.py',89),
  ('compound_stmt -> local_decls stmt_list','compound_stmt',2,'p_compound_stmt','parser.py',95),
  ('local_decls -> local_decls local_decl','local_decls',2,'p_local_decls','parser.py',101),
  ('local_decls -> empty','local_decls',1,'p_local_decls','parser.py',102),
  ('local_decl -> type_spec IDENT SEMICOLON','local_decl',3,'p_local_decl','parser.py',108),
  ('local_decl -> type_spec IDENT LBRACKET RBRACKET SEMICOLON','local_decl',5,'p_local_decl','parser.py',109),
  ('stmt_list -> stmt_list stmt','stmt_list',2,'p_stmt_list','parser.py',115),
  ('stmt_list -> empty','stmt_list',1,'p_stmt_list','parser.py',116),
  ('stmt -> expr_stmt','stmt',1,'p_stmt','parser.py',122),
  ('stmt -> if_stmt','stmt',1,'p_stmt','parser.py',123),
  ('stmt -> while_stmt','stmt',1,'p_stmt','parser.py',124),
  ('stmt -> return_stmt','stmt',1,'p_stmt','parser.py',125),
  ('expr_stmt -> expr SEMICOLON','expr_stmt',2,'p_expr_stmt','parser.py',132),
  ('expr_stmt -> SEMICOLON','expr_stmt',1,'p_expr_stmt','parser.py',133),
  ('while_stmt -> WHILE LPAREN expr RPAREN stmt','while_stmt',5,'p_while_stmt','parser.py',139),
  ('if_stmt -> IF LPAREN expr RPAREN stmt','if_stmt',5,'p_if_stmt','parser.py',146),
  ('if_stmt -> IF LPAREN expr RPAREN stmt ELSE stmt','if_stmt',7,'p_if_stmt','parser.py',147),
  ('return_stmt -> RETURN SEMICOLON','return_stmt',2,'p_return_stmt','parser.py',155),
  ('return_stmt -> RETURN expr SEMICOLON','return_stmt',3,'p_return_stmt','parser.py',156),
  ('expr -> IDENT APPOINTMENT expr','expr',3,'p_expr','parser.py',163),
  ('expr -> IDENT LBRACKET expr RBRACKET EQUAL expr','expr',6,'p_expr','parser.py',164),
  ('expr -> expr OR expr','expr',3,'p_expr','parser.py',165),
  ('expr -> expr AND expr','expr',3,'p_expr','parser.py',166),
  ('expr -> expr EQUAL expr','expr',3,'p_expr','parser.py',167),
  ('expr -> expr APPOINTMENT NUMBER','expr',3,'p_expr','parser.py',168),
  ('expr -> expr LESS_THAN_EQUAL expr','expr',3,'p_expr','parser.py',169),
  ('expr -> expr GREATER_THAN_EQUAL expr','expr',3,'p_expr','parser.py',170),
  ('expr -> expr LESS_THAN expr','expr',3,'p_expr','parser.py',171),
  ('expr -> expr GREATER_THAN expr','expr',3,'p_expr','parser.py',172),
  ('expr -> expr TIMES expr','expr',3,'p_expr','parser.py',173),
  ('expr -> expr PLUS expr','expr',3,'p_expr','parser.py',174),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr','parser.py',175),
  ('expr -> expr MINUS expr','expr',3,'p_expr','parser.py',176),
  ('expr -> ! expr','expr',2,'p_expr','parser.py',177),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_expr','parser.py',178),
  ('expr -> IDENT','expr',1,'p_expr','parser.py',179),
  ('expr -> IDENT LBRACKET expr RBRACKET','expr',4,'p_expr','parser.py',180),
  ('expr -> IDENT LPAREN args RPAREN','expr',4,'p_expr','parser.py',181),
  ('expr -> NUMBER','expr',1,'p_expr','parser.py',182),
  ('arg_list -> arg_list COMMA expr','arg_list',3,'p_arg_list','parser.py',202),
  ('arg_list -> expr','arg_list',1,'p_arg_list','parser.py',203),
  ('args -> arg_list','args',1,'p_args','parser.py',209),
  ('args -> empty','args',1,'p_args','parser.py',210),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',216),
]
