
# fooparsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "programleftANDORleftGREATER_THANLESS_THANGREATER_THAN_EQUALLESS_THAN_EQUALleftPLUSMINUSleftTIMESDIVIDEAND APPOINTMENT BOOL CHAR COMMA DIVIDE DOUBLEQUOTATION ELSE EQUAL FLOAT FOR GREATER_THAN GREATER_THAN_EQUAL ID IDENT IF INT KEYWORD LBRACKET LCBRACKET LESS_THAN LESS_THAN_EQUAL LPAREN MINUS NUMBER OR PLUS PRINT RBRACKET RCBRACKET RETURN RPAREN SEMICOLON TIMES VOID WHILE\n     program    :   decl_list\n    empty :\n    decl_list   :   decl_list decl\n                |   decl\n\n    \n    decl    :   var_decl\n            |   fun_decl\n    \n    var_decl    :   type_spec IDENT SEMICOLON\n                |   type_spec IDENT LBRACKET RBRACKET SEMICOLON\n    \n    type_spec   :   VOID\n                |   BOOL\n                |   INT\n                |   FLOAT\n                |   CHAR\n    \n    fun_decl    :   type_spec IDENT LPAREN params RPAREN compound_stmt\n    \n    params  :   param_list\n            |   VOID\n    \n    param_list  :   param_list COMMA param\n                |   param\n    \n    param   :   type_spec IDENT\n            |   type_spec IDENT LBRACKET RBRACKET\n    \n    compound_stmt   :   LCBRACKET local_decls stmt_list RCBRACKET\n    \n    local_decls    :    local_decls local_decl\n                   |    empty\n    \n    local_decl     :    type_spec IDENT SEMICOLON\n                   |    type_spec IDENT LBRACKET RBRACKET SEMICOLON\n    \n    stmt_list   :   stmt_list stmt\n                |   empty\n    \n    stmt    :   expr_stmt\n            |   if_stmt\n            |   while_stmt\n            |   for_stmt\n            |   return_stmt\n\n    \n    expr_stmt   :   expr SEMICOLON\n                |   SEMICOLON\n    \n    while_stmt  :   WHILE LPAREN expr RPAREN stmt\n    \n    for_stmt    :   FOR LPAREN expr SEMICOLON expr SEMICOLON expr RPAREN stmt\n    \n    if_stmt  :     IF LPAREN expr RPAREN stmt\n             |     IF LPAREN expr RPAREN ELSE stmt\n    \n    return_stmt  :   RETURN SEMICOLON\n                 |   RETURN expr SEMICOLON\n    \n    expr    :   IDENT APPOINTMENT expr\n            |   IDENT LBRACKET expr RBRACKET EQUAL expr\n            |   expr OR expr\n            |   expr AND expr\n            |   expr LESS_THAN_EQUAL expr\n            |   expr GREATER_THAN_EQUAL expr\n            |   expr LESS_THAN expr\n            |   expr GREATER_THAN expr\n            |   expr TIMES expr\n            |   expr PLUS expr\n            |   expr DIVIDE expr\n            |   expr MINUS expr\n            |   '!' expr\n            |   LPAREN expr RPAREN\n            |   IDENT\n            |   IDENT LBRACKET expr RBRACKET\n            |   IDENT LPAREN args RPAREN\n\n\n    \n    arg_list    :   arg_list COMMA expr\n                |   expr\n    \n    args    :   arg_list\n            |   empty\n    "
    
_lr_action_items = {'VOID':([0,2,3,4,5,12,14,16,23,26,28,29,32,33,35,38,76,106,],[7,7,-4,-5,-6,-3,-7,21,-8,7,-14,-2,7,-23,-22,-21,-24,-25,]),'BOOL':([0,2,3,4,5,12,14,16,23,26,28,29,32,33,35,38,76,106,],[8,8,-4,-5,-6,-3,-7,8,-8,8,-14,-2,8,-23,-22,-21,-24,-25,]),'INT':([0,2,3,4,5,12,14,16,23,26,28,29,32,33,35,38,76,106,],[9,9,-4,-5,-6,-3,-7,9,-8,9,-14,-2,9,-23,-22,-21,-24,-25,]),'FLOAT':([0,2,3,4,5,12,14,16,23,26,28,29,32,33,35,38,76,106,],[10,10,-4,-5,-6,-3,-7,10,-8,10,-14,-2,10,-23,-22,-21,-24,-25,]),'CHAR':([0,2,3,4,5,12,14,16,23,26,28,29,32,33,35,38,76,106,],[11,11,-4,-5,-6,-3,-7,11,-8,11,-14,-2,11,-23,-22,-21,-24,-25,]),'$end':([1,2,3,4,5,12,14,23,28,38,],[0,-1,-4,-5,-6,-3,-7,-8,-14,-21,]),'IDENT':([6,7,8,9,10,11,18,21,29,32,33,34,35,36,37,39,40,41,42,43,44,46,48,51,53,55,56,57,58,59,60,61,62,63,64,65,66,68,69,70,72,73,74,76,92,100,101,102,105,106,107,108,109,111,113,114,117,118,],[13,-9,-10,-11,-12,-13,24,-9,-2,-2,-23,52,-22,-27,54,-26,-28,-29,-30,-31,-32,-34,52,52,52,-33,52,52,52,52,52,52,52,52,52,52,52,52,52,-39,52,52,52,-24,-40,52,52,52,52,-25,-37,52,-35,52,-38,52,52,-36,]),'SEMICOLON':([13,17,29,32,33,34,35,36,39,40,41,42,43,44,45,46,51,52,54,55,70,71,75,76,78,79,80,81,82,83,84,85,86,87,89,91,92,93,99,100,101,103,104,106,107,108,109,110,113,115,117,118,],[14,23,-2,-2,-23,46,-22,-27,-26,-28,-29,-30,-31,-32,55,-34,70,-55,76,-33,-39,92,-53,-24,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-54,102,-40,-41,106,46,46,-56,-57,-25,-37,46,-35,114,-38,-42,46,-36,]),'LBRACKET':([13,24,52,54,],[15,27,73,77,]),'LPAREN':([13,29,32,33,34,35,36,39,40,41,42,43,44,46,47,48,49,50,51,52,53,55,56,57,58,59,60,61,62,63,64,65,66,68,69,70,72,73,74,76,92,100,101,102,105,106,107,108,109,111,113,114,117,118,],[16,-2,-2,-23,48,-22,-27,-26,-28,-29,-30,-31,-32,-34,66,48,68,69,48,74,48,-33,48,48,48,48,48,48,48,48,48,48,48,48,48,-39,48,48,48,-24,-40,48,48,48,48,-25,-37,48,-35,48,-38,48,48,-36,]),'RBRACKET':([15,27,52,75,77,78,79,80,81,82,83,84,85,86,87,89,93,94,103,104,115,],[17,31,-55,-53,99,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-54,-41,103,-56,-57,-42,]),'RPAREN':([19,20,21,22,24,30,31,52,67,74,75,78,79,80,81,82,83,84,85,86,87,88,89,90,93,95,96,97,98,103,104,112,115,116,],[25,-15,-16,-18,-19,-17,-20,-55,89,-2,-53,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,100,-54,101,-41,104,-60,-61,-59,-56,-57,-58,-42,117,]),'COMMA':([20,22,24,30,31,52,75,78,79,80,81,82,83,84,85,86,87,89,93,96,98,103,104,112,115,],[26,-18,-19,-17,-20,-55,-53,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-54,-41,105,-59,-56,-57,-58,-42,]),'LCBRACKET':([25,],[29,]),'RCBRACKET':([29,32,33,34,35,36,39,40,41,42,43,44,46,55,70,76,92,106,107,109,113,118,],[-2,-2,-23,38,-22,-27,-26,-28,-29,-30,-31,-32,-34,-33,-39,-24,-40,-25,-37,-35,-38,-36,]),'IF':([29,32,33,34,35,36,39,40,41,42,43,44,46,55,70,76,92,100,101,106,107,108,109,113,117,118,],[-2,-2,-23,47,-22,-27,-26,-28,-29,-30,-31,-32,-34,-33,-39,-24,-40,47,47,-25,-37,47,-35,-38,47,-36,]),'WHILE':([29,32,33,34,35,36,39,40,41,42,43,44,46,55,70,76,92,100,101,106,107,108,109,113,117,118,],[-2,-2,-23,49,-22,-27,-26,-28,-29,-30,-31,-32,-34,-33,-39,-24,-40,49,49,-25,-37,49,-35,-38,49,-36,]),'FOR':([29,32,33,34,35,36,39,40,41,42,43,44,46,55,70,76,92,100,101,106,107,108,109,113,117,118,],[-2,-2,-23,50,-22,-27,-26,-28,-29,-30,-31,-32,-34,-33,-39,-24,-40,50,50,-25,-37,50,-35,-38,50,-36,]),'RETURN':([29,32,33,34,35,36,39,40,41,42,43,44,46,55,70,76,92,100,101,106,107,108,109,113,117,118,],[-2,-2,-23,51,-22,-27,-26,-28,-29,-30,-31,-32,-34,-33,-39,-24,-40,51,51,-25,-37,51,-35,-38,51,-36,]),'!':([29,32,33,34,35,36,39,40,41,42,43,44,46,48,51,53,55,56,57,58,59,60,61,62,63,64,65,66,68,69,70,72,73,74,76,92,100,101,102,105,106,107,108,109,111,113,114,117,118,],[-2,-2,-23,53,-22,-27,-26,-28,-29,-30,-31,-32,-34,53,53,53,-33,53,53,53,53,53,53,53,53,53,53,53,53,53,-39,53,53,53,-24,-40,53,53,53,53,-25,-37,53,-35,53,-38,53,53,-36,]),'OR':([45,52,67,71,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,98,103,104,110,112,115,116,],[56,-55,56,56,56,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,56,-54,56,56,56,56,56,-56,-57,56,56,56,56,]),'AND':([45,52,67,71,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,98,103,104,110,112,115,116,],[57,-55,57,57,57,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,57,-54,57,57,57,57,57,-56,-57,57,57,57,57,]),'LESS_THAN_EQUAL':([45,52,67,71,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,98,103,104,110,112,115,116,],[58,-55,58,58,58,58,58,-45,-46,-47,-48,-49,-50,-51,-52,58,-54,58,58,58,58,58,-56,-57,58,58,58,58,]),'GREATER_THAN_EQUAL':([45,52,67,71,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,98,103,104,110,112,115,116,],[59,-55,59,59,59,59,59,-45,-46,-47,-48,-49,-50,-51,-52,59,-54,59,59,59,59,59,-56,-57,59,59,59,59,]),'LESS_THAN':([45,52,67,71,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,98,103,104,110,112,115,116,],[60,-55,60,60,60,60,60,-45,-46,-47,-48,-49,-50,-51,-52,60,-54,60,60,60,60,60,-56,-57,60,60,60,60,]),'GREATER_THAN':([45,52,67,71,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,98,103,104,110,112,115,116,],[61,-55,61,61,61,61,61,-45,-46,-47,-48,-49,-50,-51,-52,61,-54,61,61,61,61,61,-56,-57,61,61,61,61,]),'TIMES':([45,52,67,71,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,98,103,104,110,112,115,116,],[62,-55,62,62,62,62,62,62,62,62,62,-49,62,-51,62,62,-54,62,62,62,62,62,-56,-57,62,62,62,62,]),'PLUS':([45,52,67,71,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,98,103,104,110,112,115,116,],[63,-55,63,63,63,63,63,63,63,63,63,-49,-50,-51,-52,63,-54,63,63,63,63,63,-56,-57,63,63,63,63,]),'DIVIDE':([45,52,67,71,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,98,103,104,110,112,115,116,],[64,-55,64,64,64,64,64,64,64,64,64,-49,64,-51,64,64,-54,64,64,64,64,64,-56,-57,64,64,64,64,]),'MINUS':([45,52,67,71,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,98,103,104,110,112,115,116,],[65,-55,65,65,65,65,65,65,65,65,65,-49,-50,-51,-52,65,-54,65,65,65,65,65,-56,-57,65,65,65,65,]),'APPOINTMENT':([52,],[72,]),'ELSE':([100,],[108,]),'EQUAL':([103,],[111,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'decl_list':([0,],[2,]),'decl':([0,2,],[3,12,]),'var_decl':([0,2,],[4,4,]),'fun_decl':([0,2,],[5,5,]),'type_spec':([0,2,16,26,32,],[6,6,18,18,37,]),'params':([16,],[19,]),'param_list':([16,],[20,]),'param':([16,26,],[22,30,]),'compound_stmt':([25,],[28,]),'local_decls':([29,],[32,]),'empty':([29,32,74,],[33,36,97,]),'stmt_list':([32,],[34,]),'local_decl':([32,],[35,]),'stmt':([34,100,101,108,117,],[39,107,109,113,118,]),'expr_stmt':([34,100,101,108,117,],[40,40,40,40,40,]),'if_stmt':([34,100,101,108,117,],[41,41,41,41,41,]),'while_stmt':([34,100,101,108,117,],[42,42,42,42,42,]),'for_stmt':([34,100,101,108,117,],[43,43,43,43,43,]),'return_stmt':([34,100,101,108,117,],[44,44,44,44,44,]),'expr':([34,48,51,53,56,57,58,59,60,61,62,63,64,65,66,68,69,72,73,74,100,101,102,105,108,111,114,117,],[45,67,71,75,78,79,80,81,82,83,84,85,86,87,88,90,91,93,94,98,45,45,110,112,45,115,116,45,]),'args':([74,],[95,]),'arg_list':([74,],[96,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> decl_list','program',1,'p_program','parser.py',23),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',29),
  ('decl_list -> decl_list decl','decl_list',2,'p_decl_list','parser.py',36),
  ('decl_list -> decl','decl_list',1,'p_decl_list','parser.py',37),
  ('decl -> var_decl','decl',1,'p_decl','parser.py',44),
  ('decl -> fun_decl','decl',1,'p_decl','parser.py',45),
  ('var_decl -> type_spec IDENT SEMICOLON','var_decl',3,'p_var_decl','parser.py',51),
  ('var_decl -> type_spec IDENT LBRACKET RBRACKET SEMICOLON','var_decl',5,'p_var_decl','parser.py',52),
  ('type_spec -> VOID','type_spec',1,'p_type_spec','parser.py',58),
  ('type_spec -> BOOL','type_spec',1,'p_type_spec','parser.py',59),
  ('type_spec -> INT','type_spec',1,'p_type_spec','parser.py',60),
  ('type_spec -> FLOAT','type_spec',1,'p_type_spec','parser.py',61),
  ('type_spec -> CHAR','type_spec',1,'p_type_spec','parser.py',62),
  ('fun_decl -> type_spec IDENT LPAREN params RPAREN compound_stmt','fun_decl',6,'p_fun_decl','parser.py',68),
  ('params -> param_list','params',1,'p_params','parser.py',74),
  ('params -> VOID','params',1,'p_params','parser.py',75),
  ('param_list -> param_list COMMA param','param_list',3,'p_param_list','parser.py',81),
  ('param_list -> param','param_list',1,'p_param_list','parser.py',82),
  ('param -> type_spec IDENT','param',2,'p_param','parser.py',88),
  ('param -> type_spec IDENT LBRACKET RBRACKET','param',4,'p_param','parser.py',89),
  ('compound_stmt -> LCBRACKET local_decls stmt_list RCBRACKET','compound_stmt',4,'p_compound_stmt','parser.py',95),
  ('local_decls -> local_decls local_decl','local_decls',2,'p_local_decls','parser.py',101),
  ('local_decls -> empty','local_decls',1,'p_local_decls','parser.py',102),
  ('local_decl -> type_spec IDENT SEMICOLON','local_decl',3,'p_local_decl','parser.py',108),
  ('local_decl -> type_spec IDENT LBRACKET RBRACKET SEMICOLON','local_decl',5,'p_local_decl','parser.py',109),
  ('stmt_list -> stmt_list stmt','stmt_list',2,'p_stmt_list','parser.py',115),
  ('stmt_list -> empty','stmt_list',1,'p_stmt_list','parser.py',116),
  ('stmt -> expr_stmt','stmt',1,'p_stmt','parser.py',122),
  ('stmt -> if_stmt','stmt',1,'p_stmt','parser.py',123),
  ('stmt -> while_stmt','stmt',1,'p_stmt','parser.py',124),
  ('stmt -> for_stmt','stmt',1,'p_stmt','parser.py',125),
  ('stmt -> return_stmt','stmt',1,'p_stmt','parser.py',126),
  ('expr_stmt -> expr SEMICOLON','expr_stmt',2,'p_expr_stmt','parser.py',133),
  ('expr_stmt -> SEMICOLON','expr_stmt',1,'p_expr_stmt','parser.py',134),
  ('while_stmt -> WHILE LPAREN expr RPAREN stmt','while_stmt',5,'p_while_stmt','parser.py',140),
  ('for_stmt -> FOR LPAREN expr SEMICOLON expr SEMICOLON expr RPAREN stmt','for_stmt',9,'p_for_stmt','parser.py',146),
  ('if_stmt -> IF LPAREN expr RPAREN stmt','if_stmt',5,'p_if_stmt','parser.py',153),
  ('if_stmt -> IF LPAREN expr RPAREN ELSE stmt','if_stmt',6,'p_if_stmt','parser.py',154),
  ('return_stmt -> RETURN SEMICOLON','return_stmt',2,'p_return_stmt','parser.py',162),
  ('return_stmt -> RETURN expr SEMICOLON','return_stmt',3,'p_return_stmt','parser.py',163),
  ('expr -> IDENT APPOINTMENT expr','expr',3,'p_expr','parser.py',170),
  ('expr -> IDENT LBRACKET expr RBRACKET EQUAL expr','expr',6,'p_expr','parser.py',171),
  ('expr -> expr OR expr','expr',3,'p_expr','parser.py',172),
  ('expr -> expr AND expr','expr',3,'p_expr','parser.py',173),
  ('expr -> expr LESS_THAN_EQUAL expr','expr',3,'p_expr','parser.py',174),
  ('expr -> expr GREATER_THAN_EQUAL expr','expr',3,'p_expr','parser.py',175),
  ('expr -> expr LESS_THAN expr','expr',3,'p_expr','parser.py',176),
  ('expr -> expr GREATER_THAN expr','expr',3,'p_expr','parser.py',177),
  ('expr -> expr TIMES expr','expr',3,'p_expr','parser.py',178),
  ('expr -> expr PLUS expr','expr',3,'p_expr','parser.py',179),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr','parser.py',180),
  ('expr -> expr MINUS expr','expr',3,'p_expr','parser.py',181),
  ('expr -> ! expr','expr',2,'p_expr','parser.py',182),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_expr','parser.py',183),
  ('expr -> IDENT','expr',1,'p_expr','parser.py',184),
  ('expr -> IDENT LBRACKET expr RBRACKET','expr',4,'p_expr','parser.py',185),
  ('expr -> IDENT LPAREN args RPAREN','expr',4,'p_expr','parser.py',186),
  ('arg_list -> arg_list COMMA expr','arg_list',3,'p_arg_list','parser.py',204),
  ('arg_list -> expr','arg_list',1,'p_arg_list','parser.py',205),
  ('args -> arg_list','args',1,'p_args','parser.py',211),
  ('args -> empty','args',1,'p_args','parser.py',212),
]
